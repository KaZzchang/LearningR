---
title: "Reproducible documents"
author: "Simon Chang"
format: html
editor: visual
---

```{r setup}
#| message: false
#| warning: false


library(tidyverse)
# get raw data
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))
# smaller data set
small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)
# tidier data ser
tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)
# tidied data set
tidied_post_meal_data <- tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```


## Showing the data

```{r}
post_meal_data
glimpse(post_meal_data)
```

```{r ggplot}
library(ggplot2)
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
## Basic histogram

```{r}
#| fig-cap: "Dist. of BMI"
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
This is my figure (@fig-bmi-histo)

## Excersice: discrete plots
```{r discrete plots}
#| fig-cap: "Grouping"
#| label: fig-group-bar
ggplot(post_meal_data, aes(x = Group)) +
  geom_bar()
```

See @fig-group-bar above for a cool plot!

## Plotting two discrete

```{r two discrete}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```

## Side by side plots

```{r histogram}
post_meal_data |>
  ggplot(aes(x = BMI)) +
  geom_histogram()
```
```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```
```{r side-by-side-plots}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glycemia."
#|   - "Grouping in relation to glycemia"
#| layout-ncol: 3
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()

post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```
## Plotting two continuous variables

```{r two continouus}
#| fig-cap: "Scatterplot of BKI against PG"
#| label: fig-bmi-aucpg

ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point(aes(fill = Group)) +
  geom_smooth()
```
## Pushing changes to remote

Oh oh - how exciting!

## Pulling file from Github

Even more exiting

## Selecting Data

```{r}
select(post_meal_data, Age)
select(post_meal_data, Age, BMI, Weight)
select(post_meal_data, -Group)
select(post_meal_data, starts_with("Insulin"))
select(post_meal_data, ends_with("5"))
select(post_meal_data, contains("0"))
```

## Renaming specific columns

```{r rename}
small_post_meal_data |>
  rename(auc_glucose = auc_pg)
```
## Select and rename tasks


```{r}
# Task 1.
post_meal_data |>
  select(contains("OGTT"))

# Task 2.
post_meal_data |>
  select(contains(".."), -contains("...")) |>
  rename(P.Glucose.minus5.OGTT = P.Glucose..5.OGTT) |>
  rename(Insulin.minus5.OGTT = Insulin..5.OGTT.X)


# Task 3.
basic_info <- select(post_meal_data, id, BMI, Length, Weight, Age)
rename(basic_info, Height = Length)
```


## Filtering on rows

```{r}
small_post_meal_data |>
  filter(glykemi == 1)

small_post_meal_data |>
  filter(BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR")
```
```{r}
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE

TRUE | TRUE
TRUE | FALSE
FALSE | FALSE
```
```{r}
small_post_meal_data |>
  filter(Group == "CTR", BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR" | BMI >= 25)
```

## Modify or add column

```{r}
tidier_post_meal_data %>%
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Conrol", "First-degree Relative")
  )
```

## Practice with filter and mutate

Use filter() to find how many participants have a BMI of more than or equal to 20 and less than or equal to 40, and are in the “FDR” Group. How many are there?

Create a percent_body_fat column with mutate() by dividing the Fat.mass.DXA by the Weight, then multiplying by 100. Hint: In R, use * to multiply and / to divide. Then pipe to filter() to find out how many participants have a percent_body_fat greater than 30.
```{r}
# Task 1.
post_meal_data |>
  filter(BMI >= 20 & BMI <= 40 & Group == "FDR")

# Task 2.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100
  ) |>
  filter(percent_body_fat > 30)
```

## Visualizing with jitter plot

```{r}
tidied_post_meal_data %>%
  mutate(overweight = if_else(BMI >= 25, "Overweight", "Not overweight")) %>%
  ggplot(aes(x = overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```

## Plotting three or more variables

```{r}
tidied_post_meal_data %>%
  filter(BMI < 30) %>%
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point()
```
```{r}
tidied_post_meal_data %>%
  filter(BMI < 30) %>%
  mutate(young = if_else(Age < 40, "Young", "Old")) %>%
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(col = vars(young)) +
  labs(
    x = "Body mass index (BMI)",
    y = "Insulin to glucose ratio (%)"
  )
```
## Make multi-dimensional plots!

1) Create a new column called percent_body_fat that calculates the percentage of body fat by dividing Fat.mass.DXA by Weight and multiplying by 100. You wrote this code previously in another exercise, you can re-use that code if you would like.
2 )Create a new column called young that groups people into two categories of being above ("Old") or below ("Young") 40 years of age by using if_else().
3) Use ggplot() and aes() to create the plot by putting Group on the x-axis, percent_body_fat on the y-axis, and colour the points by young. Use geom_jitter() to show the data points. The argument width = 0.2 has already been set for you to have the points cluster together a bit more

```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2

# Task 1.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "Old")
  ) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour = young)) +
  geom_jitter(width = 0.2)


# Task 2.
post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA, colour = insulin_insensitive)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```
## Changing colours

```{r}
# Tasks 1. and 2.
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis")

# Tasks 3. and 4.
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c(option = "inferno")
```

## Calculating summary statistics

```{r}
tidied_post_meal_data |>
  summarise(max_bmi = max(BMI))

tidied_post_meal_data |>
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```


## Summarize with splitting

```{r}
tidied_post_meal_data |>
  group_by(Group) |>
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) |>
  ungroup()
```
